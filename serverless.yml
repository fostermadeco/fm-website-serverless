# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: fm-website
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::fm-website-apply-docs/*"

functions:
  requestUploadURL:
    handler: handler.requestUploadURL
    events: 
      - http:
          path: requestUploadURL
          method: post
          cors: true
  # authAccess: 
  #   handler: handler.authAccess
  #     events: 
  #       - http
  #         method: get
  #   role: 'arn:aws:iam::660174252064:role/service-role/basicAuthTestRole'
  #   tags:
  #     'lambda-console:blueprint': cloudfront-response-generation

# you can add CloudFormation resource templates here
resources:
  Resources:
    MyBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: fm-website-apply-docs
          AccessControl: Private
          CorsConfiguration:
            CorsRules:
            - AllowedMethods:
              - PUT
              - POST
              - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    CloudFrontOriginIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
          CloudFrontOriginAccessIdentityConfig:
            Comment: 'origin identity'
    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: fm-website-apply-docs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
                Action: 's3:GetObject'
                Resource: arn:aws:s3:::fm-website-apply-docs/*
    publicDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
          DistributionConfig:
            Origins:
              - DomainName: fm-website-apply-docs.s3.us-east-1.amazonaws.com
                Id: S3-fm-website-apply-docs
                S3OriginConfig:
                  OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
            Enabled: 'true'
            # Comment: Some comment
            DefaultCacheBehavior:
              AllowedMethods:
                - GET
                - HEAD
              TargetOriginId: S3-fm-website-apply-docs
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
            ViewerCertificate:
              CloudFrontDefaultCertificate: 'true'
    
    # define a policy for an existing role
    UploadFilePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: UploadObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: LambdaPutObjects
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectTagging
              Resource: 
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: MyBucket
                    - "/*"
        Roles:
          - fm-website-serverless-lambda
    